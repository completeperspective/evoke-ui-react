name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Core build and test pipeline
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        working-directory: packages/evoke-ui-react
        run: pnpm type-check

      - name: Linting
        working-directory: packages/evoke-ui-react
        run: |
          # Run ESLint if config exists
          if [ -f ".eslintrc.cjs" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            echo "Running ESLint..."
            npx eslint src --ext .ts,.tsx --max-warnings 0
          else
            echo "No ESLint config found, skipping..."
          fi

      - name: Build component library
        working-directory: packages/evoke-ui-react
        run: |
          pnpm build
          echo "Build completed successfully"

          # Verify build outputs
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi

          echo "✅ Build artifacts verified"

      - name: Run unit tests
        working-directory: packages/evoke-ui-react
        run: |
          pnpm test --run --coverage
          echo "Unit tests completed"

      - name: Package integrity test
        working-directory: packages/evoke-ui-react
        run: |
          if [ -f "scripts/test-package.mjs" ]; then
            echo "Running package integrity tests..."
            pnpm test:package
          else
            echo "No package test script found, skipping..."
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./packages/evoke-ui-react/coverage/lcov.info
          flags: unittests
          name: evoke-ui-react-coverage
          fail_ci_if_error: false

  # Storybook build verification
  storybook-build:
    name: 📖 Storybook Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build component library
        working-directory: packages/evoke-ui-react
        run: pnpm build

      - name: Build Storybook
        working-directory: packages/evoke-ui-react
        run: |
          pnpm build-storybook
          echo "Storybook build completed"

          # Verify Storybook build
          if [ ! -d "../../storybook-static" ]; then
            echo "❌ Storybook build failed - storybook-static directory not found"
            exit 1
          fi

          if [ ! -f "../../storybook-static/index.html" ]; then
            echo "❌ Storybook build failed - index.html not found"
            exit 1
          fi

          echo "✅ Storybook build verified"

      - name: Upload Storybook build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: storybook-build-${{ github.sha }}
          path: ./storybook-static
          retention-days: 7

  # Bundle size analysis
  bundle-analysis:
    name: 📦 Bundle Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and analyze bundle
        working-directory: packages/evoke-ui-react
        run: |
          pnpm build

          # Basic bundle size analysis
          echo "## 📦 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          if [ -d "dist" ]; then
            du -sh dist/* | sort -hr >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Total dist size: $(du -sh dist | cut -f1)" >> $GITHUB_STEP_SUMMARY
          else
            echo "No dist directory found" >> $GITHUB_STEP_SUMMARY
          fi

          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Targets" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: Core bundle < 50KB gzipped" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: CSS < 10KB for base styles" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Analysis completed" >> $GITHUB_STEP_SUMMARY

  # Quality gates summary
  quality-gates:
    name: ✅ Quality Gates
    runs-on: ubuntu-latest
    needs: [test, storybook-build, bundle-analysis]
    if: always()

    steps:
      - name: Check quality gates
        run: |
          echo "## 🎯 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job statuses
          TEST_STATUS="${{ needs.test.result }}"
          STORYBOOK_STATUS="${{ needs.storybook-build.result }}"
          BUNDLE_STATUS="${{ needs.bundle-analysis.result }}"

          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests**: $([[ $TEST_STATUS == 'success' ]] && echo '✅ Passed' || echo '❌ Failed')" >> $GITHUB_STEP_SUMMARY
          echo "- **Storybook Build**: $([[ $STORYBOOK_STATUS == 'success' ]] && echo '✅ Passed' || echo '❌ Failed')" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Analysis**: $([[ $BUNDLE_STATUS == 'success' ]] && echo '✅ Passed' || echo '❌ Failed')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ $TEST_STATUS == 'success' && $STORYBOOK_STATUS == 'success' && $BUNDLE_STATUS == 'success' ]]; then
            echo "### 🎉 All Quality Gates Passed!" >> $GITHUB_STEP_SUMMARY
            echo "Ready for deployment to GitHub Pages." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Quality Gates Failed" >> $GITHUB_STEP_SUMMARY
            echo "Some checks did not pass. Please review the failing jobs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
