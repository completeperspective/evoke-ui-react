name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

# Allow multiple PR preview deployments to run simultaneously
concurrency:
  group: "pr-preview-${{ github.event.number }}"
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  pages: write
  id-token: write

jobs:
  # Build job for PR preview
  build-preview:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build component library
        working-directory: packages/evoke-ui-react
        run: |
          pnpm build
          pnpm type-check

      - name: Run tests
        working-directory: packages/evoke-ui-react
        run: pnpm test --run

      - name: Build Storybook with PR branding
        working-directory: packages/evoke-ui-react
        run: |
          # Set PR-specific environment variables for branding
          export STORYBOOK_PR_NUMBER=${{ github.event.number }}
          export STORYBOOK_PR_TITLE="${{ github.event.pull_request.title }}"
          export STORYBOOK_PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          export STORYBOOK_PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          
          # Build Storybook with PR-specific output directory
          pnpm build-storybook --output-dir ../../pr-preview-${{ github.event.number }}
        env:
          NODE_ENV: production

      - name: Create preview deployment metadata
        run: |
          mkdir -p pr-preview-${{ github.event.number }}
          cat > pr-preview-${{ github.event.number }}/pr-info.json << EOF
          {
            "pr_number": ${{ github.event.number }},
            "pr_title": "${{ github.event.pull_request.title }}",
            "pr_branch": "${{ github.event.pull_request.head.ref }}",
            "pr_author": "${{ github.event.pull_request.user.login }}",
            "commit_sha": "${{ github.event.pull_request.head.sha }}",
            "built_at": "$(date -u -Iseconds)",
            "preview_url": "https://github.com/${{ github.repository }}/pull/${{ github.event.number }}"
          }
          EOF

      - name: Upload PR preview artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pr-preview-${{ github.event.number }}
          path: ./pr-preview-${{ github.event.number }}
          retention-days: 30

  # Deploy PR preview to GitHub Pages subfolder
  deploy-preview:
    runs-on: ubuntu-latest
    needs: build-preview
    environment:
      name: pr-preview-${{ github.event.number }}
      url: ${{ steps.get-preview-url.outputs.preview_url }}

    steps:
      - name: Checkout main branch for deployment
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download PR preview artifacts
        uses: actions/download-artifact@v3
        with:
          name: pr-preview-${{ github.event.number }}
          path: ./pr-preview-${{ github.event.number }}

      - name: Deploy to GitHub Pages subfolder
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pr-preview-${{ github.event.number }}
          destination_dir: pr-${{ github.event.number }}
          keep_files: true
          commit_message: "Deploy PR #${{ github.event.number }} preview"

      - name: Get preview URL
        id: get-preview-url
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${REPO_NAME}/pr-${{ github.event.number }}/"
          echo "preview_url=${PREVIEW_URL}" >> $GITHUB_OUTPUT

      - name: Comment PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.number }};
            const previewUrl = '${{ steps.get-preview-url.outputs.preview_url }}';
            const commitSha = '${{ github.event.pull_request.head.sha }}';
            const shortSha = commitSha.substring(0, 7);
            
            // Create comment body with preview information
            const commentBody = `## ðŸŽ¨ Storybook Preview Ready!
            
            Your component changes are now available for review:
            
            ### ðŸ“– [**View Live Preview**](${previewUrl})
            
            ---
            
            ### ðŸ“Š Preview Details
            - **Branch**: \`${{ github.event.pull_request.head.ref }}\`
            - **Commit**: \`${shortSha}\`
            - **Built**: ${new Date().toISOString().split('T')[0]} at ${new Date().toTimeString().split(' ')[0]} UTC
            - **Auto-cleanup**: Preview will be removed when PR is closed/merged
            
            ### ðŸ§ª What to Review
            - [ ] Component functionality and variants
            - [ ] Design token consistency
            - [ ] Accessibility features
            - [ ] Documentation completeness
            - [ ] Visual regression testing
            
            ---
            
            > ðŸ’¡ **Tip**: This preview updates automatically when you push new commits to the PR.`;

            // Find existing preview comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('ðŸŽ¨ Storybook Preview Ready!')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
            }

      - name: Add job summary
        run: |
          echo "## ðŸŽ¨ PR Preview Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Preview URL**: [${{ steps.get-preview-url.outputs.preview_url }}](${{ steps.get-preview-url.outputs.preview_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“‹ PR Information" >> $GITHUB_STEP_SUMMARY
          echo "- **PR #**: ${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Title**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.event.pull_request.head.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.event.pull_request.head.sha }}\`" >> $GITHUB_STEP_SUMMARY