name: Deploy Live PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

# Allow multiple PR preview deployments to run simultaneously
concurrency:
  group: 'pr-preview-${{ github.event.number }}'
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write
  actions: read

jobs:
  # Build and deploy live PR preview
  build-and-deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
      deployment-status: ${{ steps.deploy.outputs.status }}

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # Fetch full history for gh-pages branch operations
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build component library
        working-directory: packages/evoke-ui-react
        run: |
          pnpm build
          pnpm type-check

      - name: Run tests
        working-directory: packages/evoke-ui-react
        run: pnpm run test -- --run

      - name: Build Storybook with PR branding
        working-directory: packages/evoke-ui-react
        run: |
          # Set PR-specific environment variables for branding
          export STORYBOOK_PR_NUMBER=${{ github.event.number }}
          export STORYBOOK_PR_TITLE="${{ github.event.pull_request.title }}"
          export STORYBOOK_PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          export STORYBOOK_PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          export STORYBOOK_BASE_PATH="/evoke-ui/pr-${{ github.event.number }}/"

          # Build Storybook with PR-specific base path and output directory
          pnpm build-storybook --output-dir ../../pr-preview-${{ github.event.number }}
        env:
          NODE_ENV: production

      - name: Deploy to GitHub Pages PR subdirectory
        id: deploy
        run: |
          # Configure git for deployment
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Calculate preview URL
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${REPO_NAME}/pr-${{ github.event.number }}/"
          echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
          
          # Create/update deployment metadata
          mkdir -p pr-preview-${{ github.event.number }}
          cat > pr-preview-${{ github.event.number }}/pr-info.json << EOF
          {
            "pr_number": ${{ github.event.number }},
            "pr_title": "${{ github.event.pull_request.title }}",
            "pr_branch": "${{ github.event.pull_request.head.ref }}",
            "pr_author": "${{ github.event.pull_request.user.login }}",
            "commit_sha": "${{ github.event.pull_request.head.sha }}",
            "built_at": "$(date -u -Iseconds)",
            "preview_url": "${PREVIEW_URL}",
            "deployment_type": "live-preview"
          }
          EOF
          
          # Deploy using gh-pages action for live preview
          echo "📦 Deploying to: ${PREVIEW_URL}"
          
          # Use peaceiris/actions-gh-pages for subdirectory deployment
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pr-preview-${{ github.event.number }}
          destination_dir: pr-${{ github.event.number }}
          keep_files: true
          commit_message: "Deploy PR #${{ github.event.number }} preview: ${{ github.event.pull_request.title }}"
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

  # Comment on PR with live preview link
  comment-preview:
    runs-on: ubuntu-latest
    needs: build-and-deploy-preview
    if: needs.build-and-deploy-preview.result == 'success'

    steps:
      - name: Wait for GitHub Pages deployment
        run: |
          echo "⏳ Waiting for GitHub Pages to deploy the preview..."
          # Wait a bit for Pages to process the deployment
          sleep 30
          
          # Test if the preview URL is accessible
          PREVIEW_URL="${{ needs.build-and-deploy-preview.outputs.preview-url }}"
          echo "🔍 Testing preview URL: ${PREVIEW_URL}"
          
          # Simple curl test with retry
          for i in {1..5}; do
            if curl -s -f "${PREVIEW_URL}" > /dev/null; then
              echo "✅ Preview deployed successfully and accessible"
              break
            else
              echo "⏳ Attempt $i/5: Preview not yet accessible, waiting..."
              sleep 15
            fi
          done

      - name: Comment PR with live preview link
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.number }};
            const previewUrl = '${{ needs.build-and-deploy-preview.outputs.preview-url }}';
            const commitSha = '${{ github.event.pull_request.head.sha }}';
            const shortSha = commitSha.substring(0, 7);
            const buildTime = new Date().toISOString();
            
            const commentBody = `## 🚀 Live Storybook Preview Deployed!

            Your component changes are now live and ready for interactive review:

            ### 🌐 **[View Live Preview →](${previewUrl})**

            Click the link above to explore your components in an interactive Storybook environment.

            ---

            ### 📊 Preview Details
            - **Live URL**: [${previewUrl}](${previewUrl})
            - **Branch**: \`${{ github.event.pull_request.head.ref }}\`
            - **Commit**: \`${shortSha}\`
            - **Deployed**: ${buildTime.split('T')[0]} at ${buildTime.split('T')[1].split('.')[0]} UTC
            - **Auto-cleanup**: Preview will be removed when PR is closed/merged

            ### 🧪 What to Review
            - [ ] Component functionality and all variants
            - [ ] Design token consistency and theming
            - [ ] Accessibility features (use Storybook a11y addon)
            - [ ] Responsive behavior across viewports
            - [ ] Documentation completeness and examples
            - [ ] Visual regression compared to main branch

            ### 📱 Testing Tips
            - Use Storybook's **Controls** tab to test different props
            - Try the **Accessibility** tab to check for issues
            - Test on different **Viewports** using the viewport selector
            - Check **Documentation** tab for component usage examples

            ---

            > 🔄 **Auto-updates**: This preview automatically updates when you push new commits to this PR.`;

            // Find existing preview comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('🚀 Live Storybook Preview Deployed!')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
            }

      - name: Add job summary
        run: |
          PREVIEW_URL="${{ needs.build-and-deploy-preview.outputs.preview-url }}"
          echo "## 🚀 Live PR Preview Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Live Preview**: [${PREVIEW_URL}](${PREVIEW_URL})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 PR Information" >> $GITHUB_STEP_SUMMARY
          echo "- **PR #**: ${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Title**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.event.pull_request.head.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.event.pull_request.head.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 How to Review" >> $GITHUB_STEP_SUMMARY
          echo "1. Click the live preview link above" >> $GITHUB_STEP_SUMMARY
          echo "2. Explore components interactively in Storybook" >> $GITHUB_STEP_SUMMARY
          echo "3. Use Storybook addons for accessibility and viewport testing" >> $GITHUB_STEP_SUMMARY
          echo "4. Preview automatically updates with new commits to this PR" >> $GITHUB_STEP_SUMMARY
